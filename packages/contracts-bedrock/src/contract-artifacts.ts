
    /* eslint-disable @typescript-eslint/no-var-requires, no-empty */
    /*
    THIS FILE IS AUTOMATICALLY GENERATED.
    DO NOT EDIT.
    */

    
        let L1CrossDomainMessenger
        try {
          L1CrossDomainMessenger = require('../artifacts/contracts/L1/L1CrossDomainMessenger.sol/L1CrossDomainMessenger.json')
        } catch {}
        

        let L1StandardBridge
        try {
          L1StandardBridge = require('../artifacts/contracts/L1/L1StandardBridge.sol/L1StandardBridge.json')
        } catch {}
        

        let L2OutputOracle
        try {
          L2OutputOracle = require('../artifacts/contracts/L1/L2OutputOracle.sol/L2OutputOracle.json')
        } catch {}
        

        let OptimismPortal
        try {
          OptimismPortal = require('../artifacts/contracts/L1/OptimismPortal.sol/OptimismPortal.json')
        } catch {}
        

        let ResourceMetering
        try {
          ResourceMetering = require('../artifacts/contracts/L1/ResourceMetering.sol/ResourceMetering.json')
        } catch {}
        

        let GasPriceOracle
        try {
          GasPriceOracle = require('../artifacts/contracts/L2/GasPriceOracle.sol/GasPriceOracle.json')
        } catch {}
        

        let L1Block
        try {
          L1Block = require('../artifacts/contracts/L2/L1Block.sol/L1Block.json')
        } catch {}
        

        let L2CrossDomainMessenger
        try {
          L2CrossDomainMessenger = require('../artifacts/contracts/L2/L2CrossDomainMessenger.sol/L2CrossDomainMessenger.json')
        } catch {}
        

        let L2StandardBridge
        try {
          L2StandardBridge = require('../artifacts/contracts/L2/L2StandardBridge.sol/L2StandardBridge.json')
        } catch {}
        

        let L2ToL1MessagePasser
        try {
          L2ToL1MessagePasser = require('../artifacts/contracts/L2/L2ToL1MessagePasser.sol/L2ToL1MessagePasser.json')
        } catch {}
        

        let AddressManager
        try {
          AddressManager = require('../artifacts/contracts/legacy/AddressManager.sol/AddressManager.json')
        } catch {}
        

        let L1BlockNumber
        try {
          L1BlockNumber = require('../artifacts/contracts/legacy/L1BlockNumber.sol/L1BlockNumber.json')
        } catch {}
        

        let IL1ChugSplashDeployer
        try {
          IL1ChugSplashDeployer = require('../artifacts/contracts/legacy/L1ChugSplashProxy.sol/IL1ChugSplashDeployer.json')
        } catch {}
        

        let L1ChugSplashProxy
        try {
          L1ChugSplashProxy = require('../artifacts/contracts/legacy/L1ChugSplashProxy.sol/L1ChugSplashProxy.json')
        } catch {}
        

        let LegacyERC20ETH
        try {
          LegacyERC20ETH = require('../artifacts/contracts/legacy/LegacyERC20ETH.sol/LegacyERC20ETH.json')
        } catch {}
        

        let ResolvedDelegateProxy
        try {
          ResolvedDelegateProxy = require('../artifacts/contracts/legacy/ResolvedDelegateProxy.sol/ResolvedDelegateProxy.json')
        } catch {}
        

        let Burn
        try {
          Burn = require('../artifacts/contracts/libraries/Burn.sol/Burn.json')
        } catch {}
        

        let Burner
        try {
          Burner = require('../artifacts/contracts/libraries/Burn.sol/Burner.json')
        } catch {}
        

        let Bytes
        try {
          Bytes = require('../artifacts/contracts/libraries/Bytes.sol/Bytes.json')
        } catch {}
        

        let Encoding
        try {
          Encoding = require('../artifacts/contracts/libraries/Encoding.sol/Encoding.json')
        } catch {}
        

        let Hashing
        try {
          Hashing = require('../artifacts/contracts/libraries/Hashing.sol/Hashing.json')
        } catch {}
        

        let Predeploys
        try {
          Predeploys = require('../artifacts/contracts/libraries/Predeploys.sol/Predeploys.json')
        } catch {}
        

        let RLPReader
        try {
          RLPReader = require('../artifacts/contracts/libraries/rlp/RLPReader.sol/RLPReader.json')
        } catch {}
        

        let RLPWriter
        try {
          RLPWriter = require('../artifacts/contracts/libraries/rlp/RLPWriter.sol/RLPWriter.json')
        } catch {}
        

        let MerkleTrie
        try {
          MerkleTrie = require('../artifacts/contracts/libraries/trie/MerkleTrie.sol/MerkleTrie.json')
        } catch {}
        

        let SecureMerkleTrie
        try {
          SecureMerkleTrie = require('../artifacts/contracts/libraries/trie/SecureMerkleTrie.sol/SecureMerkleTrie.json')
        } catch {}
        

        let Types
        try {
          Types = require('../artifacts/contracts/libraries/Types.sol/Types.json')
        } catch {}
        

        let CrossDomainMessenger
        try {
          CrossDomainMessenger = require('../artifacts/contracts/universal/CrossDomainMessenger.sol/CrossDomainMessenger.json')
        } catch {}
        

        let OptimismMintableERC20
        try {
          OptimismMintableERC20 = require('../artifacts/contracts/universal/OptimismMintableERC20.sol/OptimismMintableERC20.json')
        } catch {}
        

        let OptimismMintableERC20Factory
        try {
          OptimismMintableERC20Factory = require('../artifacts/contracts/universal/OptimismMintableERC20Factory.sol/OptimismMintableERC20Factory.json')
        } catch {}
        

        let Proxy
        try {
          Proxy = require('../artifacts/contracts/universal/Proxy.sol/Proxy.json')
        } catch {}
        

        let IStaticERC1967Proxy
        try {
          IStaticERC1967Proxy = require('../artifacts/contracts/universal/ProxyAdmin.sol/IStaticERC1967Proxy.json')
        } catch {}
        

        let IStaticL1ChugSplashProxy
        try {
          IStaticL1ChugSplashProxy = require('../artifacts/contracts/universal/ProxyAdmin.sol/IStaticL1ChugSplashProxy.json')
        } catch {}
        

        let ProxyAdmin
        try {
          ProxyAdmin = require('../artifacts/contracts/universal/ProxyAdmin.sol/ProxyAdmin.json')
        } catch {}
        

        let Semver
        try {
          Semver = require('../artifacts/contracts/universal/Semver.sol/Semver.json')
        } catch {}
        

        let StandardBridge
        try {
          StandardBridge = require('../artifacts/contracts/universal/StandardBridge.sol/StandardBridge.json')
        } catch {}
        

        let IL1Token
        try {
          IL1Token = require('../artifacts/contracts/universal/SupportedInterfaces.sol/IL1Token.json')
        } catch {}
        

        let IRemoteToken
        try {
          IRemoteToken = require('../artifacts/contracts/universal/SupportedInterfaces.sol/IRemoteToken.json')
        } catch {}
        

        let AddressAliasHelper
        try {
          AddressAliasHelper = require('../artifacts/contracts/vendor/AddressAliasHelper.sol/AddressAliasHelper.json')
        } catch {}
        

        let WETH9
        try {
          WETH9 = require('../artifacts/contracts/vendor/WETH9.sol/WETH9.json')
        } catch {}
        

    export const getContractArtifact = (name: string): any => {
      return {
        L1CrossDomainMessenger,
L1StandardBridge,
L2OutputOracle,
OptimismPortal,
ResourceMetering,
GasPriceOracle,
L1Block,
L2CrossDomainMessenger,
L2StandardBridge,
L2ToL1MessagePasser,
AddressManager,
L1BlockNumber,
IL1ChugSplashDeployer,
L1ChugSplashProxy,
LegacyERC20ETH,
ResolvedDelegateProxy,
Burn,
Burner,
Bytes,
Encoding,
Hashing,
Predeploys,
RLPReader,
RLPWriter,
MerkleTrie,
SecureMerkleTrie,
Types,
CrossDomainMessenger,
OptimismMintableERC20,
OptimismMintableERC20Factory,
Proxy,
IStaticERC1967Proxy,
IStaticL1ChugSplashProxy,
ProxyAdmin,
Semver,
StandardBridge,
IL1Token,
IRemoteToken,
AddressAliasHelper,
WETH9
      }[name]
    }
    